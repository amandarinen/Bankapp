@* @page "/History"
@inject IAccountService AccountService
@inject IStorageService StorageService

<h3 class="mb-3">History</h3>

@if (_accounts.Count == 0)
{
    <p>Inga konton finns.</p>
}
else
{
    <div class="mb-3">
        <label class="form-label">Choose Account</label>
        <InputSelect TValue="string"
                     Value="@_selectedAccountIdString"
                     ValueChanged="OnAccountChanged"
                     ValueExpression="@(() => _selectedAccountIdString)"
                     class="form-select">
            <option value="">Select an account</option>
            @foreach (var account in _accounts)
            {
                <option value="@account.Id.ToString()">@account.Name</option>
            }
        </InputSelect>
    </div>

    @if (_transactions.Any())
    {
        <div class="table-responsive" style="max-width: 900px;">
            <table class="table table-striped align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Date</th>
                        <th>Type</th>
                        <th>Amount</th>
                        <th>From</th>
                        <th>To</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var t in _transactions)
                    {
                        <tr>
                            <td>@t.TimeStamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                            <td>@t.transactionType</td>
                            <td>@t.Amount</td>
                            <td>@(_accounts.FirstOrDefault(a => a.Id == t.FromAccountId)?.Name)</td>
                            <td>@(_accounts.FirstOrDefault(a => a.Id == t.ToAccountId)?.Name)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (!string.IsNullOrEmpty(_selectedAccountIdString))
    {
        <div class="alert alert-light border" style="max-width: 720px;">
            Inga transaktioner hittades för valt konto.
        </div>
    }
}

@code {
    private List<BankAccount> _accounts = new();
    private List<Transaction> _transactions = new();
    private string _selectedAccountIdString = "";

    // protected override async Task OnInitializedAsync()
    // {
    //     _accounts = (await AccountService.GetAccounts()).ToList();

    //     // Läs sparat konto från LocalStorage
    //     var saved = await StorageService.GetItemAsStringAsync("selectedAccountId");
    //     if (!string.IsNullOrEmpty(saved))
    //     {
    //         _selectedAccountIdString = saved;
    //         await LoadTransactionsAsync(saved);
    //     }
    // }

    protected override void OnInitialized()
    {
        _accounts = AccountService.GetAccounts();
    }

    private async Task OnAccountChanged(string selected)
    {
        _selectedAccountIdString = selected;

        // Spara som ren string
        await StorageService.SetItemAsStringAsync("selectedAccountId", _selectedAccountIdString);

        await LoadTransactionsAsync(selected);
    }

    private async Task LoadTransactionsAsync(string selectedAccountId)
    {
        if (!Guid.TryParse(selectedAccountId, out var guid))
        {
            _transactions.Clear();
            StateHasChanged();
            return;
        }

        var account = _accounts.FirstOrDefault(a => a.Id == guid);
        if (account is BankAccount bankAccount)
        {
            _transactions = bankAccount.Transactions
                .OrderByDescending(t => t.TimeStamp)
                .ToList();
        }
        else
        {
            _transactions.Clear();
        }

        StateHasChanged();
    }
}
 *@