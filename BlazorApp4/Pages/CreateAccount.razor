@page "/CreateAccount"
@using BlazorApp4.Services
@inject IAccountService AccountService;


<h3 class="mb-3">Create Account</h3>
<EditForm Model="_model" OnValidSubmit="CreateAccountAsync">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger mb-3" />

    <div class="mb-3">
        <label>Account Name</label>
        <InputText @bind-Value="_model.Name" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Account Type</label>
        <InputSelect @bind-Value="_model.AccountType" class="form-select">
            <option value="@AccountType.Deposit">Deposit Account</option>
            <option value="@AccountType.Savings">Savings Account</option>
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Currency</label>
        <InputSelect @bind-Value="_model.Currency" class="form-select">
            <option value="@CurrencyType.SEK">SEK</option>
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Balance</label>
        <InputNumber @bind-Value="_model.InitialBalance" class="form-control" min="0.01" step="0.01"></InputNumber>
        
    </div>

    <button type="submit" class="btn btn-primary" >Create account</button>
    </EditForm>

    <div class="mb-3">
    </div>

    <div class ="mb-4">
    <button class="btn btn-primary mt-3" @onclick="ApplyInterestToAll">
        Apply interest to all savings accounts
    </button>
    </div>

<h3 class="mb-3">All accounts</h3>
@if(_accounts.Count == 0)
{
    <p>Det finns inga konton ännu, registrera ditt första ovan!</p>
}
else
{
    <div class="mt-4">
        <table class="table table-sm table-hover align-middle">
            <thead>
                <tr>
                    <th>Account Name</th>
                    <th>Type</th>
                    <th>Balance</th>
                    <th>Currency</th>
                    <th>Interest</th>
                    <th>Last Updated</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var account in _accounts)
                {
                    <tr>
                        <td>@account.Name</td>
                        <td>@account.AccountType</td>
                        <td>@account.Balance.ToString("N2")</td>
                        <td>@account.Currency</td>
                        <td>@(account.InterestRate.HasValue ? (account.InterestRate.Value * 100).ToString("N2") + " %" : "-")</td>
                        <td>@account.LastUpdated.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td class="text-end">
                            <button class="btn btn-sm btn-outline-danger"
                                    @onclick="() => DeleteAccountAsync(account.Id)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {

    private CreateAccountModel _model = new();
    private List<BankAccount> _accounts = new();

    protected override async Task OnInitializedAsync()
    {
        await AccountService.EnsureLoadedAsync();
        _accounts = AccountService.GetAccounts();
    }

    private async Task CreateAccountAsync()
    {
        try
        {
            Console.WriteLine(_model.Name);

            await AccountService.CreateAccount(
                _model.Name,
                _model.AccountType,
                _model.Currency,
                _model.InitialBalance);

            _accounts = AccountService.GetAccounts();
            _model.Clear();
        }

        catch (Exception exception)
        {
            Console.WriteLine(exception);
            throw;
        }
    }

    private async Task DeleteAccountAsync(Guid Id)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", $"Do you want to delete this account??");
        if (!confirm)
            return;

        try
        {
            await AccountService.DeleteAccount(Id);
            _accounts = AccountService.GetAccounts(); // uppdaterar listan
            StateHasChanged(); // uppdaterar UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error when deleting account: {ex.Message}");
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// 
    private class CreateAccountModel
    {
        public string? Name { get; set; }
        public AccountType AccountType { get; set; }
        public CurrencyType Currency { get; set; }
        public decimal InitialBalance { get; set; } = 0;
        
        public void Clear()
        {
            Name = string.Empty;
            AccountType = AccountType.Deposit;
            Currency = CurrencyType.SEK;
            InitialBalance = 0;
        }
    }

    private async Task ApplyInterestToAll()
    {
        await AccountService.ApplyInterestAsync();
        _accounts = AccountService.GetAccounts(); // Uppdaterar listan
        StateHasChanged(); // Uppdaterar UI
    }

    [Inject] private IJSRuntime JS { get; set; } = default!;
}
