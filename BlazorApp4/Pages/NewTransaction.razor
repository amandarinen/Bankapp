@page "/NewTransaction"
@inject IAccountService AccountService


<h3 class="mb-3">Transaction</h3>

@if (_accounts.Count <2)
{
    <p>Skapa minst två konton för att göra en transaktion</p>
}
else
{
 <EditForm Model="_model" OnValidSubmit="OnSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger mb-3" />

        <div class="mb-3">
            <label class="form-label">Transfer from</label>
            <InputSelect TValue="Guid"
                         @bind-Value="_model.FromAccountId" 
                         class="form-select"
                         @onchange="HandleFormChanged">
                <option value="@Guid.Empty">Choose Account</option>
                @foreach (var account in _accounts)
                {
                    <option value="@account.Id">@account.Name (@account.Balance @account.Currency)</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Transfer to</label>
            <InputSelect TValue="Guid"
                        @bind-Value="_model.ToAccountId" 
                        class="form-select"
                        disabled="@(_model.FromAccountId == Guid.Empty)">
                <option value="@Guid.Empty">Choose Account</option>
                @foreach (var account in _toAccounts.Where(x => x.Id != _model.FromAccountId))
                {
                    <option value="@account.Id">@account.Name (@account.Balance @account.Currency)</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Amount</label>
            <InputNumber TValue="decimal" @bind-Value="_model.Amount" class="form-control" min="0.01" step="0.01" />
        </div>
        <div class="mb-3">
        <button type="submit" class="btn btn-primary ">Complete Transaction</button>
        </div>
    </EditForm>

    <div>
    <h3 class="mb-3">All accounts</h3>
        <ul class="list-group">
        @foreach (var account in _accounts)
        {
           <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                     <strong>@account.Name</strong> - @account.AccountType - @account.Balance - @account.Currency
                </div>
           </li>
        }
    </ul>
    </div>
}


@code 
{
    private readonly TransferFormModel _model = new();
    private List<BankAccount> _accounts = new();
    private List<BankAccount> _toAccounts = new();

    private class TransferFormModel
    {
        public Guid FromAccountId { get; set; }
        public Guid ToAccountId { get; set; }
        public decimal Amount { get; set; }
    }


    protected override void OnInitialized()
    {
        _accounts = AccountService.GetAccounts();

        _toAccounts = _accounts;
    }

    private async Task OnSubmitAsync()
    {
        if (_model.FromAccountId == Guid.Empty || _model.ToAccountId == Guid.Empty)
        {
            StateHasChanged();
            //return Task.CompletedTask;
        }

        if (_model.FromAccountId == _model.ToAccountId)
        {
            StateHasChanged();
            //return Task.CompletedTask;
        }
        try
        {
            await AccountService.Transfer(_model.FromAccountId, _model.ToAccountId, _model.Amount);

            //uppdatera lista
            _accounts = AccountService.GetAccounts();

            //visa bekräftelse
            var from = _accounts.First(x => x.Id == _model.FromAccountId);
            var to = _accounts.First(x => x.Id == _model.ToAccountId);

            _model.Amount = 0;
            StateHasChanged();
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
        }
        
    }

    private void HandleFormChanged(ChangeEventArgs eventArgs)
    {
        if (Guid.TryParse(eventArgs.Value?.ToString(), out var id))
        {
            OnFormChanged(id);
        }
    }

    private void OnFormChanged(Guid fromId)
    {
        _model.FromAccountId = fromId;
        var from = _accounts.FirstOrDefault(x => x.Id == fromId);

        if (from != null)
        {
            _toAccounts = _accounts.Where(account => account.Id != fromId).ToList();
        }
        else
        {
            _toAccounts = _accounts.ToList();
        }
        _model.ToAccountId = Guid.Empty;
    }

    }


